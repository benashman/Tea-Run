var io = require("socket.io").listen(8080, {log: false}),
    connections = function () {

    var self = this;

    // variables

    self.users = {

        sam: {
            username: "sam",
            name: "Sam",
            preferences: {
                sugars: 2,
                milk: true
            }
        }

    };

    // methods

    self.init = function () {

        self.setupSockets();

    };

    self.addUser = function (user) {

        self.users[user.username] = user;

    };

    self.removeUser = function (user) {

        delete self.users[user.username];

    };

    self.setupSockets = function () {

        io.sockets.on("connection", function (socket) {

            socket.join("home");

            // on joining, send a welcome message

            socket.emit("message", {

                message: "Connected to the socket!"

            });

            socket.on("registration", function (data) {

                // also give the connecting user the users object and let the other users know he has joined

                self.addUser(data);

                socket.emit("users", self.users);

                // socket.broadcast.in("home").emit("addUser", data);

                io.sockets.in("home").emit("addUser", data);

            });

            socket.on("disconnect", function (data) {

                self.removeUser(data);

                // socket.broadcast.in("home").emit("removeUser", data);

                io.sockets.in("home").emit("removeUser", data);

            });

            socket.on("brew", function (data) {

                console.log("Brew broadcast: ", data);

                io.sockets.in("home").emit("brew", data);

                // socket.broadcast.in("home").emit("brew", data);

            });

            socket.on("content", function (data) {

                switch (data.type) {

                    case "users":

                        socket.emit("content", {

                            type: "users",

                            users: self.users

                        });

                    break;

                }

            });

        });

    };

};

module.exports = connections;
