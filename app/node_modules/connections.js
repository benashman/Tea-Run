var io = require("socket.io").listen(8080, {log: false}),
    connections = function () {

    var self = this;

    // properties

    self.users = {};

    self.rooms = {};

    // variables

    self.init = function () {

        self.createRoom(["test", "test2"]);

        console.log("Rooms: ", self.rooms);

        self.deleteRoom(["test", "test2"]);

        console.log("Rooms: ", self.rooms);

        self.setupSockets();

    };

    self.setupSockets = function () {

        io.sockets.on("connection", function (socket) {

            socket.join("home");

            // on joining, send a welcome message

            socket.emit("message", {

                message: "Connected to the socket!"

            });

            socket.on("brew", function (data) {

                console.log("Brew broadcast: ", data);

                io.sockets.in("home").emit("brew", data);

            });

        });

    };

    self.createRoom = function (name) {

        var room;

        if (typeof name === "object") {

            for (var i = 0, j = name.length; i < j; i++) {

                room = {

                    name: name[i]

                };

                self.rooms[name[i]] = room;

            }

        } else {

            room = {

                name: name

            };

            self.rooms[name] = room;

        }

    };

    self.getRoom = function (name) {

        return self.rooms[name];

    };

    self.roomExists = function (name) {

        var exists = self.rooms.hasOwnProperty(name);

        if (exists === true) {

            console.log("Debug: The room '" + name + "' exists.");

        } else {

            console.log("Debug: The room '" + name + "' does not exist.");

        }

        return exists;

    };

    self.deleteRoom = function (name) {

        var index;

        if (typeof name === "object") {

            for (var i = 0, j = name.length; i < j; i++) {

                if (self.roomExists(name[i]) === true) {

                    delete self.rooms[name[i]];

                }

            }

        } else {

            if (self.roomExists(name) === true) {

                delete self.rooms[name];

            }

        }

    };

};

module.exports = connections;